#!/usr/bin/env python3

from subprocess import check_output, CalledProcessError

def simple_output(cmd):
	try:
		return check_output(cmd.split(), stderr=open("/dev/null", 'w'))
	except CalledProcessError:
		return ""

def remove_spaces(string):
	s = string.replace("  ", " ")
	while s != string:
		string = s
		s = string.replace("  ", " ")
	return s

# CPU Info
PHYSICAL_IDs=set()
CORE_IDs=set()
MAX_SIBLINGS=0
CPU_MODEL=""
for line in open("/proc/cpuinfo"):
	if not ":" in line: continue
	k,v = line.split(":")
	k = k.strip()
	if k == "siblings":
		MAX_SIBLINGS = max(MAX_SIBLINGS,int(v.strip()))
	if k == "core id":
		CORE_IDs.add(int(v.strip()))
	if k == "physical id":
		PHYSICAL_IDs.add(int(v.strip()))
	if k == "model name":
		m = v.strip()
		m = m.replace("Core(TM)", "")
		m = m.replace("(R)", "")
		m = m.replace("CPU", "")
		m = m.replace("@", "")
		CPU_MODEL = remove_spaces(m)

# Memory Info
MEM_GB=0
for line in open("/proc/meminfo"):
	if not ":" in line: continue
	k,v = line.split(":")
	k = k.strip()
	if k == "MemTotal":
		v = v.strip()
		assert v.endswith("kB")
		MEM_GB = float(v[:-2]) / (1024**2)

# Kernel Info
LINUX_VERSION=""
for line in open("/proc/version"):
	version = line.split()[2]
	version = version.split("-")[0]
	arch = simple_output("uname -m").strip()
	LINUX_VERSION = "%s %s" % (version, arch)

# Uptime
UPTIME_DAYS=0
for line in open("/proc/uptime"):
	up,idle = line.split()
	UPTIME_DAYS = float(up) / (60*60*24)

# HDD
HDDs=list()
for line in open("/proc/partitions"):
	line = line.split()
	if not line: continue
	if line[0] == "major": continue
	if line[3].startswith("sd"):
		if line[3][-1] in "0123456789": continue
		blocks = int(line[2])
		HDDs.append((line[3], blocks / (1024**2)))
ALL_HDD = ", ".join("%s %dGB" % (n,s) for n,s in HDDs)

# Devices
PCI_IDS_PATHS = [
	"/usr/share/misc/pci.ids",
	"/usr/share/hwdata/pci.ids",
	"/usr/share/libosinfo/db/pci.ids",
]
for path in PCI_IDS_PATHS:
	try:
		PCI_IDS = open(path).readlines()
	except IOError:
		continue
def named_pci_devices(vendor_id, device_id):
	i = 0
	vendor = "unknown"
	device = "unknown"
	while i < len(PCI_IDS):
		line = PCI_IDS[i]
		i += 1
		if line.startswith(VendorID):
			vendor = line[5:].strip()
			break
	while i < len(PCI_IDS):
		line = PCI_IDS[i]
		i += 1
		if line.startswith("\t"+DeviceID):
			device = line[6:].strip()
			break
	return vendor, device

PCI_CLS_NAMES = {
	4000:    "Audio",
	20000:   "Network",
	1000000: "Graphic",
}
PCI_DEVICES=list()
for line in open("/proc/bus/pci/devices"):
	line = line.split()
	BusDevFunc = line[0]
	VendorID = line[1][:4]
	DeviceID = line[1][4:]
	cls = PCI_CLS_NAMES.get(int(line[10]), None)
	vendor,device = named_pci_devices(VendorID, DeviceID)
	if cls:
		PCI_DEVICES.append((cls,vendor,device))

# OS Info
OS_NAME="Unknown"
OS_VERSION="0.0"
for line in open("/etc/os-release"):
	k,v = line.split("=")
	if k.strip() == "NAME":
		OS_NAME = v.replace('"', '').strip()
	if k.strip() == "VERSION_ID":
		OS_VERSION = v.replace('"', '').strip()

def snip(string, before, after):
	try:
		i = string.index(before)
		i += len(before)
	except ValueError:
		i = 0
	try:
		j = string.index(after, i)
	except ValueError:
		j = len(string)
	return string[i:j].strip()

def nvidia_driver_version():
	"""Get driver version of nvidia"""
	for line in open("/proc/driver/nvidia/version"):
		if not line.startswith("NVRM version:"): continue
		return "nvidia-"+snip(line, "Kernel Module  ", " ")

def nvidia_resolution():
	"""Get resolution of nvidia driven screen"""
	raw = simple_output("nvidia-settings -q CurrentMetaMode -t")
	return snip(raw, "@", " ")

def screen():
	try:
		res = nvidia_resolution()
		driver = nvidia_driver_version()
		return "%spx  %s" % (res, driver)
	except IOError:
		pass
	except OSError:
		pass
	return "unknown"

SCREEN=screen()

print("CPU: %s sockets=%d cores=%d threads=%d" % (CPU_MODEL, len(PHYSICAL_IDs), len(CORE_IDs), MAX_SIBLINGS))
print("Mem: %.3f GB" % (MEM_GB))
print("OS: %s %s (Linux %s)" % (OS_NAME, OS_VERSION, LINUX_VERSION))
print("Uptime: %d days" % (UPTIME_DAYS))
print("Disks: %s" % (ALL_HDD))
print("Screen: %s" % (SCREEN))
for dev in PCI_DEVICES:
	print("Dev %s: %s %s" % dev)
